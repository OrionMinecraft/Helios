/*
 * This file is part of project Helios, licensed under the MIT License (MIT).
 *
 * Copyright (c) 2017 Mark Vainomaa <mikroskeem@mikroskeem.eu>
 * Copyright (c) Contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package eu.mikroskeem.helios.mod.mixins.exploit;

import com.destroystokyo.paper.event.player.IllegalPacketEvent;
import eu.mikroskeem.helios.mod.HeliosMod;
import eu.mikroskeem.helios.mod.configuration.categories.ExploitConfiguration;
import eu.mikroskeem.helios.mod.delegate.inventory.HeliosItemStackDelegate;
import eu.mikroskeem.helios.mod.interfaces.itemstack.HeliosItemStack;
import eu.mikroskeem.helios.mod.interfaces.packet.PacketPlayInSetCreativeSlotAccessor;
import eu.mikroskeem.shuriken.common.Ensure;
import net.minecraft.server.v1_12_R1.*;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Redirect;


/**
 * Mixin to prevent various exploits
 *
 * @author Mark Vainomaa
 */
@Mixin(value = PlayerConnection.class, remap = false)
public abstract class MixinPlayerConnection {
    private final static String ON_SET_CREATIVE_SLOT = "a(Lnet/minecraft/server/v1_12_R1/PacketPlayInSetCreativeSlot;)V";
    private final static String GET_ITEM_STACK = "Lnet/minecraft/server/v1_12_R1/PacketPlayInSetCreativeSlot;" +
            "getItemStack()Lnet/minecraft/server/v1_12_R1/ItemStack;";
    private final static String SET_TAG_INFO = "Lnet/minecraft/server/v1_12_R1/ItemStack;" +
            "a(Ljava/lang/String;Lnet/minecraft/server/v1_12_R1/NBTBase;)V";
    private final static int MAX_ITEM_LENGTH = 32767;

    @Shadow public EntityPlayer player;

    @Redirect(method = ON_SET_CREATIVE_SLOT, at = @At(value = "INVOKE", target = GET_ITEM_STACK, ordinal = 0))
    public ItemStack onSetCreativeSlot(PacketPlayInSetCreativeSlot rawPacket) {
        PacketPlayInSetCreativeSlotAccessor packet = (PacketPlayInSetCreativeSlotAccessor) rawPacket;
        ItemStack itemStack = packet.getItemStack();

        /* Check for item name exploit */
        if(getConfig().getPreventItemNameOverflow()) {
            int len = itemStack.getName().length();
            if(!itemStack.isEmpty() && len > MAX_ITEM_LENGTH) {
                /* Disconnect player */
                String kickMessage = "Invalid Item Stack name length! Should be under " + MAX_ITEM_LENGTH +
                        " but was " + len + "!";
                IllegalPacketEvent.process(player.getBukkitEntity(),
                        "InvalidItemName",
                        kickMessage,
                        new IllegalStateException(kickMessage));

                /* Return empty itemstack */
                return ItemStack.a;
            }
        }

        /* Strip NBT if required */
        if(getConfig().getPreventSettingNBTToItem()) {
            itemStack = new ItemStack(itemStack.getItem());
            HeliosItemStackDelegate.setLore(itemStack, getConfig().getNbtStrippedLore().split("\n"));
            ((HeliosItemStack) (Object) itemStack).setStrippedFlag(true);

            /* Modify packet object */
            packet.setItemStack(itemStack);
        }

        return itemStack;
    }

    @Redirect(method = ON_SET_CREATIVE_SLOT, at = @At(value = "INVOKE", target = SET_TAG_INFO, ordinal = 0))
    public void setTagInfo(ItemStack itemStack, String tagName, NBTBase nbt) {
        Ensure.ensureCondition(tagName.equals("BlockEntityTag"), "tagName != BlockEntityTag");

        if(getConfig().getPreventCopyingContainers()) {
            if(!((HeliosItemStack) (Object) itemStack).isStripped()) {
                itemStack.e(tagName);
                HeliosItemStackDelegate.appendLore(itemStack, getConfig().getNbtStrippedLore().split("\n"));
                ((HeliosItemStack) (Object) itemStack).setStrippedFlag(true);
            }
        } else {
            itemStack.a(tagName, nbt);
        }
    }

    /* Shortcut */
    private ExploitConfiguration getConfig() {
        return HeliosMod.INSTANCE.getConfigurationWrapper().getConfiguration().getExploitConfiguration();
    }
}
